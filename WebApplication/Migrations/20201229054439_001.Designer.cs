// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication.Database;

namespace WebApplication.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20201229054439_001")]
    partial class _001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("WebApplication.Database.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37dca5a0-83b6-4ace-bd89-e141670dd2d3"),
                            Name = "Admin",
                            Password = "Admin",
                            RegistrationDate = new DateTime(2020, 12, 29, 8, 44, 39, 311, DateTimeKind.Local).AddTicks(2214),
                            UserId = new Guid("91ed60a4-8a9d-404d-ad91-f067c1f2b8a5")
                        });
                });

            modelBuilder.Entity("WebApplication.Database.Models.AccountCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyName");

                    b.ToTable("AccountCurrencies");
                });

            modelBuilder.Entity("WebApplication.Database.Models.CurrencyInformation", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("DepositCommission")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DepositLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TransferCommission")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TransferLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WithdrawCommission")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WithdrawLimit")
                        .HasColumnType("numeric");

                    b.HasKey("Name");

                    b.ToTable("CurrencyInformation");
                });

            modelBuilder.Entity("WebApplication.Database.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyName");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("WebApplication.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91ed60a4-8a9d-404d-ad91-f067c1f2b8a5"),
                            Email = "Admin@com",
                            RegistrationDate = new DateTime(2020, 12, 29, 8, 44, 39, 306, DateTimeKind.Local).AddTicks(7984),
                            Role = 0
                        });
                });

            modelBuilder.Entity("WebApplication.Database.Models.UserCommission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<decimal?>("DepositCommission")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TransferCommission")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("WithdrawCommission")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyName");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommissions");
                });

            modelBuilder.Entity("WebApplication.Database.Models.Account", b =>
                {
                    b.HasOne("WebApplication.Database.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication.Database.Models.AccountCurrency", b =>
                {
                    b.HasOne("WebApplication.Database.Models.Account", "Account")
                        .WithMany("AccountCurrencies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication.Database.Models.CurrencyInformation", "CurrencyInformation")
                        .WithMany("AccountCurrencies")
                        .HasForeignKey("CurrencyName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");

                    b.Navigation("CurrencyInformation");
                });

            modelBuilder.Entity("WebApplication.Database.Models.Operation", b =>
                {
                    b.HasOne("WebApplication.Database.Models.CurrencyInformation", "CurrencyInformation")
                        .WithMany("Operations")
                        .HasForeignKey("CurrencyName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication.Database.Models.Account", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication.Database.Models.Account", "ToAccount")
                        .WithMany("Operations")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyInformation");

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("WebApplication.Database.Models.UserCommission", b =>
                {
                    b.HasOne("WebApplication.Database.Models.CurrencyInformation", "CurrencyInformation")
                        .WithMany("UserCommissions")
                        .HasForeignKey("CurrencyName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication.Database.Models.User", "User")
                        .WithMany("UserCommissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication.Database.Models.Account", b =>
                {
                    b.Navigation("AccountCurrencies");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("WebApplication.Database.Models.CurrencyInformation", b =>
                {
                    b.Navigation("AccountCurrencies");

                    b.Navigation("Operations");

                    b.Navigation("UserCommissions");
                });

            modelBuilder.Entity("WebApplication.Database.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("UserCommissions");
                });
#pragma warning restore 612, 618
        }
    }
}
